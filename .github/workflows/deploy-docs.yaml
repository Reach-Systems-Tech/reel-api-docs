name: Deploy Documentation

on:
  repository_dispatch:
    types: [deploy-docs]
  push:
    paths:
      - "docs/**"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-docs:
    if: github.event_name == 'repository_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Download and extract documentation
        run: |
          VERSION="${{ github.event.client_payload.version }}"
          DOWNLOAD_URL="${{ github.event.client_payload.download_url }}"

          echo "Downloading docs for version: $VERSION"
          curl -L "$DOWNLOAD_URL" -o docs.tar.gz

          # Debug: Show what we downloaded
          echo "Archive contents preview:"
          tar -tzf docs.tar.gz | head -15

          # FIXED: Extract to temp directory first to see structure
          mkdir temp_extract
          tar -xzf docs.tar.gz -C temp_extract

          echo "Extracted archive structure:"
          find temp_extract -type f | head -15

          # CRITICAL: Handle the nested structure correctly
          if [ -d "temp_extract/docs/api/auto_docs" ]; then
            echo "Found nested docs/api/auto_docs structure - extracting correctly..."
            
            # Create version directory
            mkdir -p "docs/$VERSION"
            
            # Move version-specific files from nested structure
            if [ -d "temp_extract/docs/api/auto_docs/$VERSION" ]; then
              echo "Moving version-specific files from temp_extract/docs/api/auto_docs/$VERSION/ to docs/$VERSION/"
              cp -r temp_extract/docs/api/auto_docs/$VERSION/* "docs/$VERSION/"
            elif [ -f "temp_extract/docs/api/auto_docs/index.html" ]; then
              # Fallback: if version directory doesn't exist, but files do
              echo "Version directory not found, copying available files..."
              cp -r temp_extract/docs/api/auto_docs/* "docs/$VERSION/"
            else
              echo "❌ ERROR: No recognizable file structure in archive!"
              find temp_extract -type f
              exit 1
            fi
            
            # Copy global files (versions.json, etc.) to root docs
            if [ -f "temp_extract/docs/api/auto_docs/versions.json" ]; then
              cp temp_extract/docs/api/auto_docs/versions.json docs/
              echo "Copied global versions.json"
            fi
            
          else
            echo "Archive has flat structure - extracting directly..."
            mkdir -p "docs/$VERSION"
            cp -r temp_extract/* "docs/$VERSION/"
          fi

          # Clean up temp directory
          rm -rf temp_extract

          echo "Final extracted structure:"
          find "docs/$VERSION" -type f | head -15
          echo "Total files extracted: $(find "docs/$VERSION" -type f | wc -l)"

          # Verify key files exist in correct locations
          if [ -f "docs/$VERSION/index.html" ]; then
            echo "✅ Version-specific index.html found at correct location"
            # Check what type of template it is
            if grep -q "redoc-container" "docs/$VERSION/index.html"; then
              echo "✅ CORRECT: Version index.html contains Redoc template"
            else
              echo "❌ ERROR: Version index.html does not contain Redoc template"
              echo "First 200 chars of version index.html:"
              head -c 200 "docs/$VERSION/index.html"
              
              # Additional debugging
              echo ""
              echo "File details:"
              ls -la "docs/$VERSION/index.html"
              echo "Does it contain 'Auto-redirecting'?"
              grep -q "Auto-redirecting" "docs/$VERSION/index.html" && echo "YES - This is the WRONG template!" || echo "NO"
            fi
          else
            echo "❌ ERROR: Version-specific index.html missing at docs/$VERSION/index.html"
            echo "Available files:"
            ls -la "docs/$VERSION/"
          fi

          if [ -f "docs/$VERSION/_tools/doc_updater.py" ]; then
            echo "✅ Documentation updater tool found"
          else
            echo "❌ Documentation updater tool missing!"
            echo "Available files in version directory:"
            find "docs/$VERSION" -name "*.py" || echo "No Python files found"
          fi

      - name: Update versions.json with semantic sorting
        run: |
          VERSION="${{ github.event.client_payload.version }}"

          # Create or update versions.json
          if [ ! -f "docs/versions.json" ]; then
            echo '[]' > docs/versions.json
          fi

          # Update versions list with Python for proper semantic sorting
          python3 << 'EOF'
          import json
          import re

          version = "${{ github.event.client_payload.version }}"

          try:
              with open('docs/versions.json', 'r') as f:
                  versions = json.load(f)
          except:
              versions = []

          if version not in versions:
              versions.append(version)
              
          # Sort versions by semantic version (newest first)
          def version_key(v):
              match = re.match(r'^(\d+)(?:\.(\d+))?(?:\.(\d+))?', v)
              if match:
                  parts = match.groups()
                  return tuple(int(p) if p else 0 for p in parts)
              return (0, 0, 0, v)

          versions.sort(key=version_key, reverse=True)

          with open('docs/versions.json', 'w') as f:
              json.dump(versions, f, indent=2)

          print(f"Updated versions.json with: {versions}")

          # Store latest version for later use
          if versions:
              with open('latest_version.txt', 'w') as f:
                  f.write(versions[0])
          EOF

      - name: Run documentation updater (ONLY for dropdowns)
        run: |
          VERSION="${{ github.event.client_payload.version }}"

          # Check if we have the tool available
          if [ -f "docs/$VERSION/_tools/doc_updater.py" ]; then
            echo "Running documentation updater to update ONLY version dropdowns..."
            echo "⚠️  IMPORTANT: This should ONLY update dropdowns, NOT recreate entire files"
            
            # CRITICAL: Verify the version file has correct template BEFORE running updater
            if [ -f "docs/$VERSION/index.html" ]; then
              if grep -q "redoc-container" "docs/$VERSION/index.html"; then
                echo "✅ PRE-UPDATE: Version file has correct Redoc template"
              else
                echo "❌ PRE-UPDATE: Version file has WRONG template - stopping here!"
                echo "Content preview:"
                head -n 20 "docs/$VERSION/index.html"
                exit 1
              fi
            fi
            
            python3 "docs/$VERSION/_tools/doc_updater.py" --docs-dir docs
            
            # CRITICAL: Verify the version file STILL has correct template AFTER running updater  
            if [ -f "docs/$VERSION/index.html" ]; then
              if grep -q "redoc-container" "docs/$VERSION/index.html"; then
                echo "✅ POST-UPDATE: Version file still has correct Redoc template"
              else
                echo "❌ POST-UPDATE: doc_updater.py CORRUPTED the version file!"
                echo "This confirms doc_updater.py is overwriting templates instead of just updating dropdowns"
                exit 1
              fi
            fi
            
            echo "Documentation updater completed successfully"
          else
            echo "Documentation updater not found, skipping dynamic updates"
            echo "Files will still be deployed but version navigation may be limited"
          fi

      - name: Create root index.html ONLY if missing (and only create landing page)
        run: |
          # ONLY create root index.html if it doesn't exist
          if [ ! -f "docs/index.html" ]; then
            LATEST_VERSION=$(cat latest_version.txt 2>/dev/null || echo "unknown")
            
            echo "Creating root landing page index.html..."
            echo "Latest version: $LATEST_VERSION"
            
            # Extract API title from a version-specific file
            API_TITLE="API Documentation"
            if [ -f "docs/$LATEST_VERSION/index.html" ]; then
              API_TITLE=$(grep -o '<title>[^<]*</title>' "docs/$LATEST_VERSION/index.html" | sed 's/<title>\(.*\) - .*/\1/' | head -1 || echo "API Documentation")
              API_TITLE=$(echo "$API_TITLE" | sed 's/<[^>]*>//g' | sed 's/Documentation.*//' | xargs)
              if [ -z "$API_TITLE" ]; then
                API_TITLE="API Documentation"
              fi
              echo "Extracted API title: '$API_TITLE'"
            fi
            
            # Create the HTML file using echo statements (YAML-safe)
            {
              echo '<!DOCTYPE html>'
              echo '<html lang="en">'
              echo '<head>'
              echo '    <meta charset="UTF-8">'
              echo '    <meta name="viewport" content="width=device-width, initial-scale=1.0">'
              echo "    <title>$API_TITLE Documentation</title>"
              echo '    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">'
              echo '    <style>'
              echo '        body { font-family: '\''Roboto'\'', sans-serif; max-width: 800px; margin: 0 auto; padding: 40px 20px; line-height: 1.6; background: #fafafa; }'
              echo '        .container { background: white; padding: 40px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }'
              echo '        h1 { color: #ff092e; border-bottom: 2px solid #ff092e; padding-bottom: 10px; margin-top: 0; }'
              echo '        .version-list { list-style: none; padding: 0; }'
              echo '        .version-list li { margin: 15px 0; }'
              echo '        .version-list a { display: inline-block; padding: 12px 24px; background: #f8f9fa; color: #124AFF; text-decoration: none; border-radius: 6px; border: 1px solid #e9ecef; transition: all 0.2s; font-weight: 500; }'
              echo '        .version-list a:hover { background: #124AFF; color: white; transform: translateY(-1px); box-shadow: 0 4px 8px rgba(0,0,0,0.1); }'
              echo '        .latest { background: #ff092e !important; color: white !important; }'
              echo '        .latest:hover { background: #cb2c30 !important; }'
              echo '        .auto-redirect { background: #fff3cd; border: 1px solid #ffeaa7; padding: 20px; border-radius: 6px; margin: 25px 0; }'
              echo '    </style>'
              echo '</head>'
              echo '<body>'
              echo '    <div class="container">'
              echo "        <h1>$API_TITLE Documentation</h1>"
              echo '        <div class="auto-redirect">'
              echo "            <p><strong>Auto-redirecting to latest version ($LATEST_VERSION) in 3 seconds...</strong></p>"
              echo "            <p><a href=\"$LATEST_VERSION/\">Click here to go immediately</a></p>"
              echo '        </div>'
              echo '        <h2>Available Versions</h2>'
              echo '        <ul class="version-list">'
              echo "            <li><a href=\"$LATEST_VERSION/\" class=\"latest\">$LATEST_VERSION (latest)</a></li>"
              echo '        </ul>'
              echo '    </div>'
              echo '    <script>'
              echo "        setTimeout(() => { window.location.href = '$LATEST_VERSION/'; }, 3000);"
              echo '    </script>'
              echo '</body>'
              echo '</html>'
            } > docs/index.html
            
            echo "✅ Created root index.html with landing page template"
          else
            echo "Root index.html already exists, not overwriting"
          fi

      - name: Clean up tool files from docs
        run: |
          # Remove _tools directories from final documentation
          # (they were only needed for the updater script)
          find docs -name "_tools" -type d -exec rm -rf {} + 2>/dev/null || true
          echo "Cleaned up temporary tool files"

      - name: Final structure verification
        run: |
          echo "=== FINAL DOCUMENTATION STRUCTURE ==="
          find docs -name "*.html" -o -name "*.json" | sort

          echo ""
          echo "=== versions.json content ==="
          cat docs/versions.json

          echo ""
          echo "=== CRITICAL VERIFICATION CHECKS ==="

          if [ -f "docs/index.html" ]; then
            echo "✅ Root index.html exists"
            if grep -q "Auto-redirecting" docs/index.html && ! grep -q "redoc-container" docs/index.html; then
              echo "✅ Root index.html has CORRECT landing page template"
            else
              echo "❌ Root index.html has WRONG template"
            fi
          else
            echo "❌ Root index.html missing!"
          fi

          if [ -f "docs/versions.json" ]; then
            echo "✅ Root versions.json exists"
          else
            echo "❌ Root versions.json missing!"
          fi

          # Check that each version has correct templates - FIXED REGEX
          for version_dir in docs/*/; do
            if [ -d "$version_dir" ]; then
              version=$(basename "$version_dir")
              # Use grep instead of regex for better compatibility
              if echo "$version" | grep -E '^[0-9]+(\.[0-9]+)*$' >/dev/null || echo "$version" | grep '^test' >/dev/null; then
                echo "Checking version: $version"
                if [ -f "$version_dir/index.html" ]; then
                  if grep -q "redoc-container" "$version_dir/index.html" && ! grep -q "Auto-redirecting" "$version_dir/index.html"; then
                    echo "  ✅ $version/index.html has CORRECT Redoc template"
                  else
                    echo "  ❌ $version/index.html has WRONG template!"
                    echo "  First 100 chars:"
                    head -c 100 "$version_dir/index.html"
                  fi
                else
                  echo "  ❌ $version/index.html missing!"
                fi
                if [ -f "$version_dir/versions.json" ]; then
                  echo "  ✅ $version/versions.json exists"
                else
                  echo "  ❌ $version/versions.json missing!"
                fi
              fi
            fi
          done

      - name: Commit and push changes
        run: |
          VERSION="${{ github.event.client_payload.version }}"

          git config --local user.email "action@github.com"
          git config --local user.name "Documentation Bot"

          # Ensure we're on main branch
          git checkout main

          git add docs/
          if ! git diff --cached --quiet; then
            git commit -m "Auto-update documentation for version $VERSION

          - Added/updated version $VERSION documentation  
          - Updated all version dropdowns and navigation
          - Synchronized versions.json across all directories
          - Updated root index.html with latest version list

          All documentation files now have dynamic version switching capability."
            
            git push origin main
            echo "Documentation committed and pushed to main branch"
            echo "GitHub Pages will automatically deploy from /docs folder"
            echo ""
            echo "Documentation will be available at:"
            echo "   - Root: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
            echo "   - Version $VERSION: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/$VERSION/"
          else
            echo "No changes to commit"
          fi

      - name: Clean up temporary files
        run: |
          rm -f docs.tar.gz latest_version.txt
