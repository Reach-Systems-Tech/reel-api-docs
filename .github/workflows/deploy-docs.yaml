name: Deploy Documentation

on:
  repository_dispatch:
    types: [deploy-docs]
  push:
    paths:
      - "docs/**"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-docs:
    if: github.event_name == 'repository_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Download and extract documentation
        run: |
          VERSION="${{ github.event.client_payload.version }}"
          DOWNLOAD_URL="${{ github.event.client_payload.download_url }}"

          echo "Downloading docs for version: $VERSION"
          curl -L "$DOWNLOAD_URL" -o docs.tar.gz

          # Debug: Show what we downloaded
          echo "Archive contents preview:"
          tar -tzf docs.tar.gz | head -15

          # Create/update version directory
          mkdir -p "docs/$VERSION"
          tar -xzf docs.tar.gz -C "docs/$VERSION"

          # Debug: Show what was extracted
          echo "Extracted structure:"
          find "docs/$VERSION" -type f | head -15

          # Verify key files exist
          if [ -f "docs/$VERSION/index.html" ]; then
            echo "Version-specific index.html found"
          else
            echo "Version-specific index.html missing!"
          fi

          if [ -f "docs/$VERSION/_tools/doc_updater.py" ]; then
            echo "Documentation updater tool found"
          else
            echo "Documentation updater tool missing!"
            echo "Available files in _tools:"
            ls -la "docs/$VERSION/_tools/" 2>/dev/null || echo "No _tools directory"
          fi

      - name: Update versions.json with semantic sorting
        run: |
          VERSION="${{ github.event.client_payload.version }}"
          
          # Create or update versions.json
          if [ ! -f "docs/versions.json" ]; then
            echo '[]' > docs/versions.json
          fi

          # Update versions list with Python for proper semantic sorting
          python3 << 'EOF'
          import json
          import re

          version = "${{ github.event.client_payload.version }}"

          try:
              with open('docs/versions.json', 'r') as f:
                  versions = json.load(f)
          except:
              versions = []

          if version not in versions:
              versions.append(version)
              
          # Sort versions by semantic version (newest first)
          def version_key(v):
              match = re.match(r'^(\d+)(?:\.(\d+))?(?:\.(\d+))?', v)
              if match:
                  parts = match.groups()
                  return tuple(int(p) if p else 0 for p in parts)
              return (0, 0, 0, v)

          versions.sort(key=version_key, reverse=True)

          with open('docs/versions.json', 'w') as f:
              json.dump(versions, f, indent=2)

          print(f"Updated versions.json with: {versions}")
          
          # Store latest version for later use
          if versions:
              with open('latest_version.txt', 'w') as f:
                  f.write(versions[0])
          EOF

      - name: Run documentation updater
        run: |
          VERSION="${{ github.event.client_payload.version }}"
          
          # Check if we have the tool available
          if [ -f "docs/$VERSION/_tools/doc_updater.py" ]; then
            echo "Running documentation updater..."
            python3 "docs/$VERSION/_tools/doc_updater.py" --docs-dir docs
            echo "Documentation updater completed"
          else
            echo "Documentation updater not found, skipping dynamic updates"
            echo "Files will still be deployed but version navigation may be limited"
          fi

      - name: Create/update root index.html if needed
        run: |
          # Create root index.html if it doesn't exist
          if [ ! -f "docs/index.html" ]; then
            LATEST_VERSION=$(cat latest_version.txt 2>/dev/null || echo "unknown")
            if [ -f "docs/$LATEST_VERSION/index.html" ]; then
              echo "Creating root index.html from latest version template..."
              
              # Extract API title from the version-specific file
              API_TITLE=$(grep -o '<title>[^<]*</title>' "docs/$LATEST_VERSION/index.html" | sed 's/<title>\(.*\) - .*/\1/' || echo "API Documentation")
              
              # Create a basic root index that will be updated by the updater script
              cat > docs/index.html << EOF
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>$API_TITLE Documentation</title>
              <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
              <style>
                  body { font-family: 'Roboto', sans-serif; max-width: 800px; margin: 0 auto; padding: 40px 20px; line-height: 1.6; background: #fafafa; }
                  .container { background: white; padding: 40px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                  h1 { color: #ff092e; border-bottom: 2px solid #ff092e; padding-bottom: 10px; margin-top: 0; }
                  .version-list { list-style: none; padding: 0; }
                  .version-list li { margin: 15px 0; }
                  .version-list a { display: inline-block; padding: 12px 24px; background: #f8f9fa; color: #124AFF; text-decoration: none; border-radius: 6px; border: 1px solid #e9ecef; transition: all 0.2s; font-weight: 500; }
                  .version-list a:hover { background: #124AFF; color: white; transform: translateY(-1px); box-shadow: 0 4px 8px rgba(0,0,0,0.1); }
                  .latest { background: #ff092e !important; color: white !important; }
                  .latest:hover { background: #cb2c30 !important; }
                  .auto-redirect { background: #fff3cd; border: 1px solid #ffeaa7; padding: 20px; border-radius: 6px; margin: 25px 0; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>$API_TITLE Documentation</h1>
                  <div class="auto-redirect">
                      <p><strong>Auto-redirecting to latest version ($LATEST_VERSION) in 3 seconds...</strong></p>
                      <p><a href="$LATEST_VERSION/">Click here to go immediately</a></p>
                  </div>
                  <h2>Available Versions</h2>
                  <ul class="version-list">
                      <li><a href="$LATEST_VERSION/" class="latest">$LATEST_VERSION (latest)</a></li>
                  </ul>
              </div>
              <script>
                  setTimeout(() => { window.location.href = '$LATEST_VERSION/'; }, 3000);
              </script>
          </body>
          </html>
          EOF
              echo "Created root index.html"
            fi
          fi

      - name: Clean up tool files from docs
        run: |
          # Remove _tools directories from final documentation
          # (they were only needed for the updater script)
          find docs -name "_tools" -type d -exec rm -rf {} + 2>/dev/null || true
          echo "Cleaned up temporary tool files"

      - name: Final structure verification
        run: |
          echo "=== Final documentation structure ==="
          find docs -name "*.html" -o -name "*.json" | sort
          
          echo ""
          echo "=== versions.json content ==="
          cat docs/versions.json
          
          echo ""
          echo "=== Verification checks ==="
          
          if [ -f "docs/index.html" ]; then
            echo "Root index.html exists"
          else
            echo "Root index.html missing!"
          fi
          
          if [ -f "docs/versions.json" ]; then
            echo "Root versions.json exists"
          else
            echo "Root versions.json missing!"
          fi
          
          # Check that each version has its files
          for version_dir in docs/*/; do
            if [ -d "$version_dir" ]; then
              version=$(basename "$version_dir")
              if [[ "$version" =~ ^[0-9]+(\.[0-9]+)*$ ]]; then
                echo "Checking version: $version"
                if [ -f "$version_dir/index.html" ]; then
                  echo "  $version/index.html exists"
                else
                  echo "  $version/index.html missing!"
                fi
                if [ -f "$version_dir/versions.json" ]; then
                  echo "  $version/versions.json exists"
                else
                  echo "  $version/versions.json missing!"
                fi
              fi
            fi
          done

      - name: Commit and push changes
        run: |
          VERSION="${{ github.event.client_payload.version }}"
          
          git config --local user.email "action@github.com"
          git config --local user.name "Documentation Bot"
          
          # Ensure we're on main branch
          git checkout main

          git add docs/
          if ! git diff --cached --quiet; then
            git commit -m "Auto-update documentation for version $VERSION

          - Added/updated version $VERSION documentation
          - Updated all version dropdowns and navigation
          - Synchronized versions.json across all directories
          - Updated root index.html with latest version list
          
          All documentation files now have dynamic version switching capability."
            
            git push origin main
            echo ""
            echo "Documentation committed and pushed to main branch"
            echo "GitHub Pages will automatically deploy from /docs folder"
            echo ""
            echo "Documentation will be available at:"
            echo "   - Root: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
            echo "   - Version $VERSION: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/$VERSION/"
          else
            echo "No changes to commit"
          fi

      - name: Clean up temporary files
        run: |
          rm -f docs.tar.gz latest_version.txt
