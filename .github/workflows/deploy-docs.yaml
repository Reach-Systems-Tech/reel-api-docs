name: Deploy Documentation

on:
  repository_dispatch:
    types: [deploy-docs]
  push:
    paths:
      - "docs/**"
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  update-docs:
    if: github.event_name == 'repository_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download and commit automated docs
        run: |
          VERSION="${{ github.event.client_payload.version }}"
          DOWNLOAD_URL="${{ github.event.client_payload.download_url }}"

          echo "Downloading docs for version: $VERSION"
          curl -L "$DOWNLOAD_URL" -o docs.tar.gz

          # Debug: Show what we downloaded
          echo "Archive contents:"
          tar -tzf docs.tar.gz | head -10

          # Create/update version directory
          mkdir -p "docs/$VERSION"
          tar -xzf docs.tar.gz -C "docs/$VERSION"

          # Debug: Show what was extracted
          echo "Extracted structure:"
          find "docs/$VERSION" -type f | head -10

          # Ensure root-level files exist
          if [ -f "docs/$VERSION/index.html" ]; then
            echo "✅ Version-specific index.html found"
          else
            echo "❌ Version-specific index.html missing!"
          fi

          # Copy/update root index.html to point to the newest version
          if [ ! -f "docs/index.html" ]; then
            if [ -f "docs/$VERSION/index.html" ]; then
              cp "docs/$VERSION/index.html" "docs/index.html"
              echo "✅ Created root index.html pointing to $VERSION"
            fi
          fi

          # Update versions list
          if [ ! -f "docs/versions.json" ]; then
            echo '[]' > docs/versions.json
          fi

          # Version management
          python3 << 'EOF'
          import json
          import re

          version = "${{ github.event.client_payload.version }}"

          try:
              with open('docs/versions.json', 'r') as f:
                  versions = json.load(f)
          except:
              versions = []

          if version not in versions:
              versions.append(version)
              
          # Sort versions by semantic version (newest first)
          def version_key(v):
              match = re.match(r'^(\d+)(?:\.(\d+))?(?:\.(\d+))?', v)
              if match:
                  parts = match.groups()
                  return tuple(int(p) if p else 0 for p in parts)
              return (0, 0, 0, v)

          versions.sort(key=version_key, reverse=True)

          with open('docs/versions.json', 'w') as f:
              json.dump(versions, f, indent=2)

          print(f"Updated versions.json with: {versions}")
          EOF

          # Final structure check
          echo "Final docs structure:"
          find docs -name "*.html" -o -name "*.json" | sort

          # Commit changes
          git config --local user.email "action@github.com"
          git config --local user.name "Documentation Bot"

          git add docs/
          if ! git diff --cached --quiet; then
            git commit -m "Auto-update documentation for version $VERSION"
            git push
          fi

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: [update-docs]
    if: always() && (needs.update-docs.result == 'success' || needs.update-docs.result == 'skipped')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main # Make sure we get the latest changes

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./docs

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
