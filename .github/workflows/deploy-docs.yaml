name: Deploy Documentation

on:
  repository_dispatch:
    types: [deploy-docs]
  push:
    paths:
      - "docs/**"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-docs:
    if: github.event_name == 'repository_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout and prepare repo state
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Ensure latest repo state
        run: |
          echo "=== ENSURING LATEST REPO STATE ==="
          git checkout main
          git pull origin main || echo "Nothing to pull"

          # Show current state
          echo "Current versions.json (if exists):"
          if [ -f "docs/versions.json" ]; then
            cat docs/versions.json
          else
            echo "No versions.json found"
          fi

          echo "Current docs structure:"
          ls -la docs/ 2>/dev/null || echo "No docs directory yet"

          echo "Current shared assets:"
          for asset in styles.css scripts.js icon.png .nojekyll; do
            if [ -f "docs/$asset" ]; then
              echo "  $asset exists ($(wc -c < docs/$asset) bytes)"
            else
              echo "  $asset missing"
            fi
          done

          - name: Download and extract documentation with shared assets
          run: |
            VERSION="${{ github.event.client_payload.version }}"
            DOWNLOAD_URL="${{ github.event.client_payload.download_url }}"
            USES_SHARED_ASSETS="${{ github.event.client_payload.uses_shared_assets }}"

            # Make extraction script executable
            chmod +x .github/scripts/extract_docs.sh

            # Run the extraction script
            .github/scripts/extract_docs.sh \
              --version "$VERSION" \
              --download-url "$DOWNLOAD_URL" \
              $([ "$USES_SHARED_ASSETS" = "true" ] && echo "--uses-shared-assets")

            # Clean up archive file
            rm -f docs.tar.gz

      - name: Update versions.json with semantic sorting
        run: |
          VERSION="${{ github.event.client_payload.version }}"

          echo "=== UPDATING VERSIONS.JSON ==="
          echo "New version to add: $VERSION"

          # Show current state
          if [ -f "docs/versions.json" ]; then
          echo "Current versions.json content:"
          cat docs/versions.json
          else
          echo "No existing versions.json found"
          mkdir -p docs
          echo '[]' > docs/versions.json
          fi

          # Run the version manager script
          python3 .github/scripts/version_manager.py \
          --docs-dir docs \
          --version "$VERSION" \
          --output-latest latest_version.txt

          echo ""
          echo "=== FINAL VERSIONS.JSON CONTENT ==="
          cat docs/versions.json

      - name: Run documentation updater (ONLY for dropdowns)
        run: |
          VERSION="${{ github.event.client_payload.version }}"

          # Check if we have the tool available
          if [ -f "docs/$VERSION/_tools/doc_updater.py" ]; then
            echo "Running documentation updater to update ONLY version dropdowns..."
            echo "IMPORTANT: This should ONLY update dropdowns, NOT recreate entire files"
            
            # CRITICAL: Verify the version file has correct template BEFORE running updater
            if [ -f "docs/$VERSION/index.html" ]; then
              if grep -q "redoc-container" "docs/$VERSION/index.html"; then
                echo "PRE-UPDATE: Version file has correct Redoc template"
                
                # Also verify shared asset links
                if grep -q 'href="../styles.css"' "docs/$VERSION/index.html"; then
                  echo "PRE-UPDATE: Version file correctly links to shared CSS"
                else
                  echo "PRE-UPDATE: Version file missing shared CSS link"
                fi
              else
                echo "PRE-UPDATE: Version file has WRONG template - stopping here!"
                echo "Content preview:"
                head -n 20 "docs/$VERSION/index.html"
                exit 1
              fi
            fi
            
            python3 "docs/$VERSION/_tools/doc_updater.py" --docs-dir docs
            
            # CRITICAL: Verify the version file STILL has correct template AFTER running updater  
            if [ -f "docs/$VERSION/index.html" ]; then
              if grep -q "redoc-container" "docs/$VERSION/index.html"; then
                echo "POST-UPDATE: Version file still has correct Redoc template"
                
                # Verify shared asset links are preserved
                if grep -q 'href="../styles.css"' "docs/$VERSION/index.html"; then
                  echo "POST-UPDATE: Shared CSS link preserved"
                else
                  echo "POST-UPDATE: Shared CSS link was lost!"
                fi
              else
                echo "POST-UPDATE: doc_updater.py CORRUPTED the version file!"
                echo "This confirms doc_updater.py is overwriting templates instead of just updating dropdowns"
                exit 1
              fi
            fi
            
            echo "Documentation updater completed successfully"
          else
            echo "Documentation updater not found, skipping dynamic updates"
            echo "Files will still be deployed but version navigation may be limited"
          fi

      - name: Create root index.html ONLY if missing
        run: |
          # ONLY create root index.html if it doesn't exist
          if [ ! -f "docs/index.html" ]; then
            LATEST_VERSION=$(cat latest_version.txt 2>/dev/null || echo "unknown")
            
            echo "Creating root landing page index.html with shared assets..."
            echo "Latest version: $LATEST_VERSION"
            
            # Extract API title from a version-specific file
            API_TITLE="API Documentation"
            if [ -f "docs/$LATEST_VERSION/index.html" ]; then
              API_TITLE=$(grep -o '<title>[^<]*</title>' "docs/$LATEST_VERSION/index.html" | sed 's/<title>\(.*\) - .*/\1/' | head -1 || echo "API Documentation")
              API_TITLE=$(echo "$API_TITLE" | sed 's/<[^>]*>//g' | sed 's/Documentation.*//' | xargs)
              if [ -z "$API_TITLE" ]; then
                API_TITLE="API Documentation"
              fi
              echo "Extracted API title: '$API_TITLE'"
            fi
            
            # Create the HTML file using echo statements (YAML-safe) with shared assets
            {
              echo '<!DOCTYPE html>'
              echo '<html lang="en">'
              echo '<head>'
              echo '    <meta charset="UTF-8">'
              echo '    <meta name="viewport" content="width=device-width, initial-scale=1.0">'
              echo "    <title>$API_TITLE Documentation</title>"
              echo '    <link rel="stylesheet" href="styles.css">'
              echo '</head>'
              echo '<body class="landing-page">'
              echo '    <div class="landing-container">'
              echo "        <h1>$API_TITLE Documentation</h1>"
              echo '        <div class="auto-redirect">'
              echo "            <p><strong>Auto-redirecting to latest version ($LATEST_VERSION) in 3 seconds...</strong></p>"
              echo "            <p><a href=\"$LATEST_VERSION/\">Click here to go immediately</a></p>"
              echo '        </div>'
              echo '        <div class="features">'
              echo '            <h3>Enhanced with Redoc</h3>'
              echo '            <ul>'
              echo '                <li><strong>Built-in sidebar navigation</strong> - Easy browsing of endpoints</li>'
              echo '                <li><strong>Search functionality</strong> - Find endpoints and schemas quickly</li>'
              echo '                <li><strong>Three-panel layout</strong> - Description, examples, and schemas</li>'
              echo '                <li><strong>Responsive design</strong> - Works great on all devices</li>'
              echo '                <li><strong>Static documentation</strong> - Perfect for hardware systems</li>'
              echo '            </ul>'
              echo '        </div>'
              echo '        <h2>Available Versions</h2>'
              echo '        <ul class="version-list">'
              echo "            <li><a href=\"$LATEST_VERSION/\" class=\"latest\">$LATEST_VERSION (latest)</a></li>"
              echo '        </ul>'
              echo '    </div>'
              echo '    <script src="scripts.js"></script>'
              echo '    <script>'
              echo "        setupAutoRedirect('$LATEST_VERSION');"
              echo '    </script>'
              echo '</body>'
              echo '</html>'
            } > docs/index.html
            
            echo "Created root index.html with landing page template and shared assets"
            
            # Verify shared asset links
            if grep -q 'href="styles.css"' docs/index.html; then
              echo "Root correctly links to shared CSS"
            else
              echo "Root missing shared CSS link"
            fi
            
            if grep -q 'src="scripts.js"' docs/index.html; then
              echo "Root correctly links to shared JS"
            else
              echo "Root missing shared JS link"
            fi
            
          else
            echo "Root index.html already exists, not overwriting"
            
            # Verify existing root has correct shared asset links
            if grep -q 'href="styles.css"' docs/index.html; then
              echo "Existing root correctly links to shared CSS"
            else
              echo "Existing root may need shared CSS link update"
            fi
          fi

      - name: Clean up tool files from docs
        run: |
          # Remove _tools directories from final documentation
          # (they were only needed for the updater script)
          find docs -name "_tools" -type d -exec rm -rf {} + 2>/dev/null || true
          echo "Cleaned up temporary tool files"

      - name: Final structure verification
        run: |
          echo "=== FINAL DOCUMENTATION STRUCTURE WITH SHARED ASSETS ==="
          find docs -name "*.html" -o -name "*.json" -o -name "*.css" -o -name "*.js" -o -name "*.png" | sort

          echo ""
          echo "=== versions.json content ==="
          cat docs/versions.json

          echo ""
          echo "=== SHARED ASSETS VERIFICATION ==="
          shared_assets=("styles.css" "scripts.js" "icon.png" ".nojekyll")

          for asset in "${shared_assets[@]}"; do
            if [ -f "docs/$asset" ]; then
              echo "docs/$asset exists ($(wc -c < docs/$asset) bytes)"
            else
              echo "docs/$asset missing!"
            fi
          done

          echo ""
          echo "=== CRITICAL VERIFICATION CHECKS ==="

          if [ -f "docs/index.html" ]; then
            echo "Root index.html exists"
            if grep -q "Auto-redirecting" docs/index.html && ! grep -q "redoc-container" docs/index.html; then
              echo "Root index.html has CORRECT landing page template"
            else
              echo "Root index.html has WRONG template"
            fi
            
            # Check shared asset links
            if grep -q 'href="styles.css"' docs/index.html; then
              echo "Root correctly uses shared CSS"
            else
              echo "Root missing shared CSS link"
            fi
          else
            echo "Root index.html missing!"
          fi

          if [ -f "docs/versions.json" ]; then
            echo "Root versions.json exists"
          else
            echo "Root versions.json missing!"
          fi

          # Check that each version has correct templates - FIXED REGEX
          for version_dir in docs/*/; do
            if [ -d "$version_dir" ]; then
              version=$(basename "$version_dir")
              # Use grep instead of regex for better compatibility
              if echo "$version" | grep -E '^[0-9]+(\.[0-9]+)*$' >/dev/null || echo "$version" | grep '^test' >/dev/null; then
                echo "Checking version: $version"
                if [ -f "$version_dir/index.html" ]; then
                  if grep -q "redoc-container" "$version_dir/index.html" && ! grep -q "Auto-redirecting" "$version_dir/index.html"; then
                    echo "  $version/index.html has CORRECT Redoc template"
                    
                    # Check shared asset links
                    if grep -q 'href="../styles.css"' "$version_dir/index.html"; then
                      echo "  $version correctly uses shared CSS"
                    else
                      echo "  $version missing shared CSS link"
                    fi
                  else
                    echo "  $version/index.html has WRONG template!"
                    echo "  First 100 chars:"
                    head -c 100 "$version_dir/index.html"
                  fi
                else
                  echo "  $version/index.html missing!"
                fi
                if [ -f "$version_dir/versions.json" ]; then
                  echo "  $version/versions.json exists"
                else
                  echo "  $version/versions.json missing!"
                fi
              fi
            fi
          done

      - name: Commit and push changes
        run: |
          VERSION="${{ github.event.client_payload.version }}"

          git config --local user.email "action@github.com"
          git config --local user.name "Documentation Bot"

          # Ensure we're on main branch
          git checkout main

          git add docs/
          if ! git diff --cached --quiet; then
            git commit -m "Auto-update documentation for version $VERSION (with shared assets)

          - Added/updated version $VERSION documentation  
          - Updated shared CSS and JavaScript assets
          - Updated all version dropdowns and navigation
          - Synchronized versions.json across all directories
          - Updated root index.html with latest version list
          - All pages now use shared assets for easier maintenance

          Shared Assets Benefits:
          - Consistent styling across all versions
          - Easy CSS/JS updates (edit once, affects all)
          - Better performance with asset caching
          - Smaller total repository size"
            
            git push origin main
            echo "Documentation committed and pushed to main branch"
            echo "GitHub Pages will automatically deploy from /docs folder"
            echo ""
            echo "Documentation will be available at:"
            echo "   - Root: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
            echo "   - Version $VERSION: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/$VERSION/"
            echo ""
            echo "Shared Assets Features:"
            echo "   - All pages use shared styles.css for consistent styling"
            echo "   - All pages use shared scripts.js for version switching"
            echo "   - All pages use shared icon.png for branding"
            echo "   - Easy maintenance: edit assets once, affects all versions"
          else
            echo "No changes to commit"
          fi

      - name: Clean up temporary files
        run: |
          rm -f docs.tar.gz latest_version.txt
