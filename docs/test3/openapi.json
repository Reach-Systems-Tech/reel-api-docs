{
  "openapi": "3.1.0",
  "info": {
    "title": "ReelAPI v1",
    "description": "ReelAPI provides comprehensive control and monitoring for cable reel systems. Features include user authentication, motor control, emergency operations, encoder calibration, and real-time status monitoring. Ideal for applications requiring precise tether management and remote reel operation.",
    "version": "test3"
  },
  "paths": {
    "/api/v1/health": {
      "get": {
        "tags": [
          "v1",
          "utils",
          "health"
        ],
        "summary": "Health Check",
        "description": "A basic healthcheck that includes database connection and a simple disk space status.",
        "operationId": "health_check_api_v1_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/health/detailed": {
      "get": {
        "tags": [
          "v1",
          "utils",
          "health"
        ],
        "summary": "Detailed Health Check",
        "description": "A detailed healthcheck includes basic healthcheck metrics as well as db latency, API endpoint versions, and environment setting.",
        "operationId": "detailed_health_check_api_v1_health_detailed_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailedHealthCheckResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/register": {
      "post": {
        "tags": [
          "v1",
          "auth"
        ],
        "summary": "Register User",
        "description": "Register a new user.\n\nThis endpoint allows you to create a new user by providing a username and password.\nThe password will be hashed before saving to the database.\nRegistration may be closed based on system configuration.",
        "operationId": "register_user_api_v1_register_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegister"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRegisterResponse"
                }
              }
            }
          },
          "403": {
            "description": "Registration is currently closed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response 403 Register User Api V1 Register Post"
                },
                "example": {
                  "detail": "Registration is currently closed"
                }
              }
            }
          },
          "409": {
            "description": "Username already registered",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response 409 Register User Api V1 Register Post"
                },
                "example": {
                  "detail": "Username already registered"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/registration-status": {
      "get": {
        "tags": [
          "v1",
          "auth"
        ],
        "summary": "Get Registration Status",
        "description": "Get the current registration status.\n\nThis endpoint returns whether user registration is currently open or closed.",
        "operationId": "get_registration_status_api_v1_registration_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRegistrationOpen"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/login": {
      "post": {
        "tags": [
          "v1",
          "auth"
        ],
        "summary": "Login User",
        "description": "Login a user.\n\nThis endpoint allows you to login a user by providing a username and password.\nA JWT token will be returned upon successful authentication.",
        "operationId": "login_user_api_v1_login_post",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_login_user_api_v1_login_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLoginResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reel/calibration/start": {
      "post": {
        "tags": [
          "v1",
          "reel",
          "encoder",
          "calibration"
        ],
        "summary": "Start Encoder Calibration",
        "description": "Start calibration process.",
        "operationId": "start_encoder_calibration_api_v1_reel_calibration_start_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StartCalibrationResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/reel/calibration/cancel": {
      "post": {
        "tags": [
          "v1",
          "reel",
          "encoder",
          "calibration"
        ],
        "summary": "Cancel Encoder Calibration",
        "description": "Cancel calibration process.",
        "operationId": "cancel_encoder_calibration_api_v1_reel_calibration_cancel_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelCalibrationResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/reel/calibration/finish": {
      "post": {
        "tags": [
          "v1",
          "reel",
          "encoder",
          "calibration"
        ],
        "summary": "Finish Encoder Calibration",
        "description": "Finish calibration process.",
        "operationId": "finish_encoder_calibration_api_v1_reel_calibration_finish_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FinishCalibrationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FinishCalibrationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/reel/activate-estop": {
      "put": {
        "tags": [
          "v1",
          "reel",
          "emergency"
        ],
        "summary": "Activate Emergency Stop",
        "description": "Enables the emergency stop feature on the reel.",
        "operationId": "activate_emergency_stop_api_v1_reel_activate_estop_put",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmergencyStopActivateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/reel/deactivate-estop": {
      "put": {
        "tags": [
          "v1",
          "reel",
          "emergency"
        ],
        "summary": "Deactivate Emergency Stop",
        "description": "Disables the emergency stop feature on the reel.",
        "operationId": "deactivate_emergency_stop_api_v1_reel_deactivate_estop_put",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmergencyStopDeactivateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/reel/encoder/zero": {
      "put": {
        "tags": [
          "v1",
          "reel",
          "encoder"
        ],
        "summary": "Zero Cable Position",
        "description": "Command encoder to zero current tether length.",
        "operationId": "zero_cable_position_api_v1_reel_encoder_zero_put",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ZeroCablePositionResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/reel/encoder/count": {
      "get": {
        "tags": [
          "v1",
          "reel",
          "encoder"
        ],
        "summary": "Get Cable Position",
        "description": "Get current encoder tether length value.",
        "operationId": "get_cable_position_api_v1_reel_encoder_count_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCablePositionResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "v1",
          "reel",
          "encoder"
        ],
        "summary": "Set Cable Position",
        "description": "Command encoder to set current tether length to specified value.",
        "operationId": "set_cable_position_api_v1_reel_encoder_count_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetEncoderCountRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetEncoderCountResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/reel/encoder/add-cable-offset": {
      "put": {
        "tags": [
          "v1",
          "reel",
          "encoder"
        ],
        "summary": "Add Cable Position Offset",
        "description": "Add an offset to the cable encoder.",
        "operationId": "add_cable_position_offset_api_v1_reel_encoder_add_cable_offset_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCableOffsetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddCableOffsetResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/reel/go-to-position": {
      "put": {
        "tags": [
          "v1",
          "reel",
          "reel-movement"
        ],
        "summary": "Go To Position",
        "description": "Command motor reel to go to specified tether length.",
        "operationId": "go_to_position_api_v1_reel_go_to_position_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GoToRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GoToResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/reel/stop": {
      "put": {
        "tags": [
          "v1",
          "reel",
          "reel-movement"
        ],
        "summary": "Stop Reel Motor",
        "description": "Stop the reel motor.",
        "operationId": "stop_reel_motor_api_v1_reel_stop_put",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReelMotorControlResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/reel/unwind": {
      "put": {
        "tags": [
          "v1",
          "reel",
          "reel-movement"
        ],
        "summary": "Unwind Reel Motor",
        "description": "Unwind the reel motor.",
        "operationId": "unwind_reel_motor_api_v1_reel_unwind_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReelMotorControlRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReelMotorControlResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/reel/wind": {
      "put": {
        "tags": [
          "v1",
          "reel",
          "reel-movement"
        ],
        "summary": "Wind Reel Motor",
        "description": "Wind the reel motor.",
        "operationId": "wind_reel_motor_api_v1_reel_wind_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReelMotorControlRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReelMotorControlResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/reel/speed": {
      "put": {
        "tags": [
          "v1",
          "reel",
          "reel-movement"
        ],
        "summary": "Update Reel Speed",
        "description": "Update the reel's speed.",
        "operationId": "update_reel_speed_api_v1_reel_speed_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReelMotorControlRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReelMotorControlResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/reel/jog": {
      "put": {
        "tags": [
          "v1",
          "reel",
          "reel-movement"
        ],
        "summary": "Jog Reel",
        "description": "Job the reel (wind or unwind) for 1/10th of a second at 100% speed.",
        "operationId": "jog_reel_api_v1_reel_jog_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReelMotorJogRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReelMotorControlResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/reel/command-lockout": {
      "get": {
        "tags": [
          "v1",
          "reel",
          "reel-movement"
        ],
        "summary": "Get Command Lockout Status",
        "description": "Get the current status of the command lockout feature.",
        "operationId": "get_command_lockout_status_api_v1_reel_command_lockout_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandLockoutResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "v1",
          "reel",
          "reel-movement"
        ],
        "summary": "Set Command Lockout",
        "description": "Enable or disable the command lockout feature.\n\nWhen enabled, all user-initiated movement commands (wind, unwind, go-to, etc.)\nwill be blocked until the lockout is disabled. Safety features like active braking\nand emergency stops will continue to function.",
        "operationId": "set_command_lockout_api_v1_reel_command_lockout_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommandLockoutRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandLockoutResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/reel/info": {
      "get": {
        "tags": [
          "v1",
          "reel",
          "settings"
        ],
        "summary": "Get Cable Reel Info",
        "description": "Get static information about the cable reel.",
        "operationId": "get_cable_reel_info_api_v1_reel_info_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CableReelInfoResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/reel/settings": {
      "get": {
        "tags": [
          "v1",
          "reel",
          "settings"
        ],
        "summary": "Get Reel Settings",
        "description": "Get the current settings of the reel.",
        "operationId": "get_reel_settings_api_v1_reel_settings_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReelSettingsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "v1",
          "reel",
          "settings"
        ],
        "summary": "Update Reel Settings",
        "description": "Update the settings of the reel.",
        "operationId": "update_reel_settings_api_v1_reel_settings_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReelSettingsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateReelSettingsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/reel/heartbeat": {
      "get": {
        "tags": [
          "v1",
          "reel",
          "health"
        ],
        "summary": "Get Heartbeat",
        "description": "Get the current status of the motor reel system.",
        "operationId": "get_heartbeat_api_v1_reel_heartbeat_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HeartbeatResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/reel/pid-calibration/start": {
      "post": {
        "tags": [
          "v1",
          "pid",
          "calibration"
        ],
        "summary": "Start Pid Calibration",
        "description": "Starts the calibration process for the PID controller used for active hold position.\n\nThe process involves driving the motor rapidly in both directions for a few milliseconds. The oscillation is normal. Please ensure\nthere is some unwinded cable to accomodate the calibration. About 1 meter is a safe amount.",
        "operationId": "start_pid_calibration_api_v1_reel_pid_calibration_start_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/reel/pid-calibration/cancel": {
      "post": {
        "tags": [
          "v1",
          "pid",
          "calibration"
        ],
        "summary": "Cancel Pid Calibration",
        "description": "Cancels the PID calibration process.",
        "operationId": "cancel_pid_calibration_api_v1_reel_pid_calibration_cancel_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/logs/download": {
      "get": {
        "tags": [
          "v1",
          "logs",
          "util"
        ],
        "summary": "Download Logs",
        "description": "Endpoint to download archived log files.\nReturns a zip file containing all log files from the specified directory.",
        "operationId": "download_logs_api_v1_logs_download_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/setup/status": {
      "get": {
        "tags": [
          "v1",
          "setup"
        ],
        "summary": "Get Setup Status",
        "description": "Get the current setup mode status including which components need configuration.",
        "operationId": "get_setup_status_api_v1_setup_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetupStatus"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/setup/configure/{component_id}": {
      "post": {
        "tags": [
          "v1",
          "setup"
        ],
        "summary": "Configure Component",
        "description": "Configure a specific component with the provided settings.",
        "operationId": "configure_component_api_v1_setup_configure__component_id__post",
        "parameters": [
          {
            "name": "component_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Component Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComponentConfigRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComponentConfigResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/setup/exit": {
      "post": {
        "tags": [
          "v1",
          "setup"
        ],
        "summary": "Exit Setup Mode",
        "description": "Attempt to exit setup mode and return to normal operation.",
        "operationId": "exit_setup_mode_api_v1_setup_exit_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExitSetupResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/camera/status": {
      "get": {
        "tags": [
          "v1",
          "camera"
        ],
        "summary": "Get Camera Status",
        "description": "Get current USB camera connection status using v4l2 detection",
        "operationId": "get_camera_status_api_v1_camera_status_get",
        "responses": {
          "200": {
            "description": "Camera status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CameraStatusResponse-Input"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CameraErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/camera/info": {
      "get": {
        "tags": [
          "v1",
          "camera"
        ],
        "summary": "Get Detailed Camera Information",
        "description": "Get detailed camera information including all detected cameras and capabilities",
        "operationId": "get_camera_info_api_v1_camera_info_get",
        "responses": {
          "200": {
            "description": "Camera info retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CameraInfoResponse-Input"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CameraErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/camera/stream": {
      "get": {
        "tags": [
          "v1",
          "camera"
        ],
        "summary": "Stream Video",
        "description": "Stream video from USB camera using v4l2 detection",
        "operationId": "stream_video_api_v1_camera_stream_get",
        "responses": {
          "200": {
            "description": "MJPEG video stream",
            "content": {
              "application/json": {
                "schema": {}
              },
              "multipart/x-mixed-replace": {}
            }
          },
          "404": {
            "description": "No cameras available",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CameraErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Failed to start camera",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CameraErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/camera/stop": {
      "post": {
        "tags": [
          "v1",
          "camera"
        ],
        "summary": "Stop Camera Stream",
        "description": "Stop camera streaming",
        "operationId": "stop_camera_stream_api_v1_camera_stop_post",
        "responses": {
          "200": {
            "description": "Camera stopped successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StopCameraResponse"
                }
              }
            }
          },
          "500": {
            "description": "Failed to stop camera",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CameraErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/camera/supported-resolutions": {
      "get": {
        "tags": [
          "v1",
          "camera"
        ],
        "summary": "Get Supported Resolutions",
        "description": "Get supported camera resolutions using v4l2 detection",
        "operationId": "get_supported_resolutions_api_v1_camera_supported_resolutions_get",
        "responses": {
          "200": {
            "description": "Supported resolutions retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupportedResolutionsResponse-Input"
                }
              }
            }
          },
          "404": {
            "description": "No cameras available",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CameraErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Failed to get resolutions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CameraErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/camera/settings": {
      "get": {
        "tags": [
          "v1",
          "camera"
        ],
        "summary": "Get Camera Settings",
        "description": "Get current camera settings and preferences",
        "operationId": "get_camera_settings_api_v1_camera_settings_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CameraSettings"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ActiveCameraStatus-Input": {
        "properties": {
          "device_path": {
            "type": "string",
            "title": "Device Path",
            "description": "Active camera device path"
          },
          "streaming": {
            "type": "boolean",
            "title": "Streaming",
            "description": "Whether camera is currently streaming"
          },
          "current_format": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CameraFormatDetail"
              },
              {
                "type": "null"
              }
            ],
            "description": "Current streaming format"
          },
          "settings": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Settings",
            "description": "Current camera settings"
          }
        },
        "type": "object",
        "required": [
          "device_path",
          "streaming"
        ],
        "title": "ActiveCameraStatus",
        "description": "Status of currently active camera",
        "example": {
          "current_format": {
            "format": "MJPG",
            "fps": 30.0,
            "height": 720,
            "width": 1280
          },
          "device_path": "/dev/video0",
          "settings": {
            "brightness": 128,
            "contrast": 128
          },
          "streaming": true
        }
      },
      "ActiveCameraStatus-Output": {
        "properties": {
          "device_path": {
            "type": "string",
            "title": "Device Path",
            "description": "Active camera device path"
          },
          "streaming": {
            "type": "boolean",
            "title": "Streaming",
            "description": "Whether camera is currently streaming"
          },
          "current_format": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CameraFormatDetail"
              },
              {
                "type": "null"
              }
            ],
            "description": "Current streaming format"
          },
          "settings": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Settings",
            "description": "Current camera settings"
          }
        },
        "type": "object",
        "required": [
          "device_path",
          "streaming"
        ],
        "title": "ActiveCameraStatus",
        "description": "Status of currently active camera",
        "example": {
          "current_format": {
            "format": "MJPG",
            "fps": 30.0,
            "height": 720,
            "width": 1280
          },
          "device_path": "/dev/video0",
          "settings": {
            "brightness": 128,
            "contrast": 128
          },
          "streaming": true
        }
      },
      "AddCableOffsetRequest": {
        "properties": {
          "offset_to_add_in_meters": {
            "type": "number",
            "title": "Offset To Add In Meters",
            "description": "The offset to add to the cable length in meters. Can be positive or negative."
          }
        },
        "type": "object",
        "required": [
          "offset_to_add_in_meters"
        ],
        "title": "AddCableOffsetRequest"
      },
      "AddCableOffsetResponse": {
        "properties": {
          "action": {
            "type": "string",
            "title": "Action"
          },
          "error": {
            "type": "boolean",
            "title": "Error"
          },
          "error_msgs": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Error Msgs",
            "default": []
          },
          "result": {
            "$ref": "#/components/schemas/AddCableOffsetResult"
          }
        },
        "type": "object",
        "required": [
          "action",
          "error",
          "result"
        ],
        "title": "AddCableOffsetResponse"
      },
      "AddCableOffsetResult": {
        "properties": {
          "new_cable_length": {
            "type": "number",
            "title": "New Cable Length"
          }
        },
        "type": "object",
        "required": [
          "new_cable_length"
        ],
        "title": "AddCableOffsetResult"
      },
      "Body_login_user_api_v1_login_post": {
        "properties": {
          "grant_type": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "password"
              },
              {
                "type": "null"
              }
            ],
            "title": "Grant Type"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "title": "Password"
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": ""
          },
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id"
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Secret"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "Body_login_user_api_v1_login_post"
      },
      "CablePositionOperationResult": {
        "properties": {
          "new_position": {
            "type": "number",
            "title": "New Position",
            "description": "The new encoder count in meters"
          }
        },
        "type": "object",
        "required": [
          "new_position"
        ],
        "title": "CablePositionOperationResult"
      },
      "CableReelInfoResponse": {
        "properties": {
          "calibration_factor": {
            "type": "number",
            "title": "Calibration Factor"
          },
          "max_speed_meters_per_second": {
            "type": "number",
            "title": "Max Speed Meters Per Second"
          },
          "motor_driver_version": {
            "type": "string",
            "title": "Motor Driver Version"
          },
          "encoder_configuration": {
            "type": "string",
            "title": "Encoder Configuration"
          },
          "api_version": {
            "type": "string",
            "title": "Api Version"
          },
          "motor_position_encoder_installed": {
            "type": "boolean",
            "title": "Motor Position Encoder Installed"
          },
          "pid_controller": {
            "$ref": "#/components/schemas/PIDControllerInfoResponse"
          }
        },
        "type": "object",
        "required": [
          "calibration_factor",
          "max_speed_meters_per_second",
          "motor_driver_version",
          "encoder_configuration",
          "api_version",
          "motor_position_encoder_installed",
          "pid_controller"
        ],
        "title": "CableReelInfoResponse"
      },
      "CalibrationResult": {
        "properties": {
          "calibrating": {
            "type": "boolean",
            "title": "Calibrating"
          }
        },
        "type": "object",
        "required": [
          "calibrating"
        ],
        "title": "CalibrationResult"
      },
      "CameraDevice-Input": {
        "properties": {
          "device_name": {
            "type": "string",
            "title": "Device Name",
            "description": "Camera device name"
          },
          "bus_info": {
            "type": "string",
            "title": "Bus Info",
            "description": "USB bus information"
          },
          "device_path": {
            "type": "string",
            "title": "Device Path",
            "description": "Device path (e.g., /dev/video0)"
          },
          "card_name": {
            "type": "string",
            "title": "Card Name",
            "description": "Camera card name"
          },
          "driver_name": {
            "type": "string",
            "title": "Driver Name",
            "description": "Camera driver name"
          },
          "supported_formats": {
            "items": {
              "$ref": "#/components/schemas/SupportedFormat"
            },
            "type": "array",
            "title": "Supported Formats",
            "description": "All supported formats and resolutions",
            "default": []
          },
          "best_format": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CameraFormatDetail"
              },
              {
                "type": "null"
              }
            ],
            "description": "Optimal format based on preferences"
          }
        },
        "type": "object",
        "required": [
          "device_name",
          "bus_info",
          "device_path",
          "card_name",
          "driver_name"
        ],
        "title": "CameraDevice",
        "description": "Individual camera device information",
        "example": {
          "best_format": {
            "format": "MJPG",
            "fps": 30.0,
            "height": 720,
            "width": 1280
          },
          "bus_info": "usb-xhci-hcd.1-2",
          "card_name": "Integrated_Webcam_HD: Integrate",
          "device_name": "Integrated_Webcam_HD: Integrate",
          "device_path": "/dev/video0",
          "driver_name": "uvcvideo",
          "supported_formats": []
        }
      },
      "CameraDevice-Output": {
        "properties": {
          "device_name": {
            "type": "string",
            "title": "Device Name",
            "description": "Camera device name"
          },
          "bus_info": {
            "type": "string",
            "title": "Bus Info",
            "description": "USB bus information"
          },
          "device_path": {
            "type": "string",
            "title": "Device Path",
            "description": "Device path (e.g., /dev/video0)"
          },
          "card_name": {
            "type": "string",
            "title": "Card Name",
            "description": "Camera card name"
          },
          "driver_name": {
            "type": "string",
            "title": "Driver Name",
            "description": "Camera driver name"
          },
          "supported_formats": {
            "items": {
              "$ref": "#/components/schemas/SupportedFormat"
            },
            "type": "array",
            "title": "Supported Formats",
            "description": "All supported formats and resolutions",
            "default": []
          },
          "best_format": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CameraFormatDetail"
              },
              {
                "type": "null"
              }
            ],
            "description": "Optimal format based on preferences"
          }
        },
        "type": "object",
        "required": [
          "device_name",
          "bus_info",
          "device_path",
          "card_name",
          "driver_name"
        ],
        "title": "CameraDevice",
        "description": "Individual camera device information",
        "example": {
          "best_format": {
            "format": "MJPG",
            "fps": 30.0,
            "height": 720,
            "width": 1280
          },
          "bus_info": "usb-xhci-hcd.1-2",
          "card_name": "Integrated_Webcam_HD: Integrate",
          "device_name": "Integrated_Webcam_HD: Integrate",
          "device_path": "/dev/video0",
          "driver_name": "uvcvideo",
          "supported_formats": []
        }
      },
      "CameraErrorResponse": {
        "properties": {
          "detail": {
            "type": "string",
            "title": "Detail",
            "description": "Error detail message"
          },
          "error_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Code",
            "description": "Specific error code"
          },
          "suggestions": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Suggestions",
            "description": "Suggested solutions"
          }
        },
        "type": "object",
        "required": [
          "detail"
        ],
        "title": "CameraErrorResponse",
        "description": "Standard error response for camera endpoints",
        "example": {
          "detail": "No USB cameras available",
          "error_code": "CAMERA_NOT_FOUND",
          "suggestions": [
            "Check that a USB camera is connected",
            "Verify camera permissions",
            "Try restarting the camera service"
          ]
        }
      },
      "CameraFormatDetail": {
        "properties": {
          "format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VideoFormat"
              }
            ],
            "description": "Video format (MJPG, YUYV, etc.)"
          },
          "width": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Width",
            "description": "Frame width in pixels"
          },
          "height": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Height",
            "description": "Frame height in pixels"
          },
          "fps": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Fps",
            "description": "Frames per second"
          }
        },
        "type": "object",
        "required": [
          "format",
          "width",
          "height",
          "fps"
        ],
        "title": "CameraFormatDetail",
        "description": "Camera format with resolution and framerate details",
        "example": {
          "format": "MJPG",
          "fps": 30.0,
          "height": 720,
          "width": 1280
        }
      },
      "CameraInfoResponse-Input": {
        "properties": {
          "connected": {
            "type": "boolean",
            "title": "Connected",
            "description": "Whether any camera is connected"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Information message"
          },
          "active_camera": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ActiveCameraStatus-Input"
              },
              {
                "type": "null"
              }
            ],
            "description": "Currently active camera status"
          },
          "all_cameras": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/CameraDevice-Input"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "All Cameras",
            "description": "All detected cameras when one is active"
          },
          "cameras": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/CameraDevice-Input"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cameras",
            "description": "All detected camera devices"
          },
          "primary_camera": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CameraDevice-Input"
              },
              {
                "type": "null"
              }
            ],
            "description": "Primary/preferred camera"
          },
          "total_cameras": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Cameras",
            "description": "Total number of cameras detected"
          },
          "cameras_found": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/CameraDevice-Input"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cameras Found",
            "description": "Cameras found (may be empty)"
          }
        },
        "type": "object",
        "required": [
          "connected",
          "message"
        ],
        "title": "CameraInfoResponse",
        "description": "Response for GET /camera/info endpoint",
        "example": {
          "cameras": [
            {
              "best_format": {
                "format": "MJPG",
                "fps": 30.0,
                "height": 720,
                "width": 1280
              },
              "bus_info": "usb-xhci-hcd.1-2",
              "card_name": "Integrated_Webcam_HD: Integrate",
              "device_name": "Integrated_Webcam_HD: Integrate",
              "device_path": "/dev/video0",
              "driver_name": "uvcvideo",
              "supported_formats": []
            }
          ],
          "connected": true,
          "message": "Found 1 USB camera(s)",
          "primary_camera": {},
          "total_cameras": 1
        }
      },
      "CameraInfoResponse-Output": {
        "properties": {
          "connected": {
            "type": "boolean",
            "title": "Connected",
            "description": "Whether any camera is connected"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Information message"
          },
          "active_camera": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ActiveCameraStatus-Output"
              },
              {
                "type": "null"
              }
            ],
            "description": "Currently active camera status"
          },
          "all_cameras": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/CameraDevice-Output"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "All Cameras",
            "description": "All detected cameras when one is active"
          },
          "cameras": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/CameraDevice-Output"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cameras",
            "description": "All detected camera devices"
          },
          "primary_camera": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CameraDevice-Output"
              },
              {
                "type": "null"
              }
            ],
            "description": "Primary/preferred camera"
          },
          "total_cameras": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Cameras",
            "description": "Total number of cameras detected"
          },
          "cameras_found": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/CameraDevice-Output"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cameras Found",
            "description": "Cameras found (may be empty)"
          }
        },
        "type": "object",
        "required": [
          "connected",
          "message"
        ],
        "title": "CameraInfoResponse",
        "description": "Response for GET /camera/info endpoint",
        "example": {
          "cameras": [
            {
              "best_format": {
                "format": "MJPG",
                "fps": 30.0,
                "height": 720,
                "width": 1280
              },
              "bus_info": "usb-xhci-hcd.1-2",
              "card_name": "Integrated_Webcam_HD: Integrate",
              "device_name": "Integrated_Webcam_HD: Integrate",
              "device_path": "/dev/video0",
              "driver_name": "uvcvideo",
              "supported_formats": []
            }
          ],
          "connected": true,
          "message": "Found 1 USB camera(s)",
          "primary_camera": {},
          "total_cameras": 1
        }
      },
      "CameraSettings": {
        "properties": {
          "preferred_resolution": {
            "type": "string",
            "title": "Preferred Resolution",
            "default": "1920x1080"
          },
          "preferred_framerate": {
            "type": "integer",
            "title": "Preferred Framerate",
            "default": 30
          },
          "preferred_format": {
            "type": "string",
            "title": "Preferred Format",
            "default": "MJPG"
          },
          "fallback_format": {
            "type": "string",
            "title": "Fallback Format",
            "default": "YUYV"
          },
          "exclude_devices": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Exclude Devices",
            "default": [
              "pispbe",
              "rpi-hevc-dec"
            ]
          },
          "jpeg_quality": {
            "type": "integer",
            "title": "Jpeg Quality",
            "default": 85
          },
          "buffer_size": {
            "type": "integer",
            "title": "Buffer Size",
            "default": 2
          }
        },
        "type": "object",
        "title": "CameraSettings"
      },
      "CameraStatusResponse-Input": {
        "properties": {
          "connected": {
            "type": "boolean",
            "title": "Connected",
            "description": "Whether any camera is connected"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Status message"
          },
          "ready": {
            "type": "boolean",
            "title": "Ready",
            "description": "Whether camera is ready for use"
          },
          "video_devices": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Video Devices",
            "description": "List of available video device paths"
          },
          "device_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Device Name",
            "description": "Primary camera device name"
          },
          "bus_info": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bus Info",
            "description": "USB bus information"
          },
          "driver_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Driver Name",
            "description": "Camera driver name"
          },
          "best_format": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CameraFormatDetail"
              },
              {
                "type": "null"
              }
            ],
            "description": "Optimal camera format"
          },
          "total_cameras": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Cameras",
            "description": "Total number of cameras detected"
          },
          "streaming": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Streaming",
            "description": "Whether camera is currently streaming"
          },
          "current_format": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CameraFormatDetail"
              },
              {
                "type": "null"
              }
            ],
            "description": "Current streaming format"
          },
          "cameras_found": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/CameraDevice-Input"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cameras Found",
            "description": "Cameras found but not ready"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error",
            "description": "Error message if camera failed to initialize"
          }
        },
        "type": "object",
        "required": [
          "connected",
          "message",
          "ready"
        ],
        "title": "CameraStatusResponse",
        "description": "Response for GET /camera/status endpoint",
        "example": {
          "best_format": {
            "format": "MJPG",
            "fps": 30.0,
            "height": 720,
            "width": 1280
          },
          "bus_info": "usb-xhci-hcd.1-2",
          "connected": true,
          "device_name": "Integrated_Webcam_HD: Integrate",
          "driver_name": "uvcvideo",
          "message": "Camera detected and ready",
          "ready": true,
          "total_cameras": 1,
          "video_devices": [
            "/dev/video0"
          ]
        }
      },
      "CameraStatusResponse-Output": {
        "properties": {
          "connected": {
            "type": "boolean",
            "title": "Connected",
            "description": "Whether any camera is connected"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Status message"
          },
          "ready": {
            "type": "boolean",
            "title": "Ready",
            "description": "Whether camera is ready for use"
          },
          "video_devices": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Video Devices",
            "description": "List of available video device paths"
          },
          "device_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Device Name",
            "description": "Primary camera device name"
          },
          "bus_info": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bus Info",
            "description": "USB bus information"
          },
          "driver_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Driver Name",
            "description": "Camera driver name"
          },
          "best_format": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CameraFormatDetail"
              },
              {
                "type": "null"
              }
            ],
            "description": "Optimal camera format"
          },
          "total_cameras": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Cameras",
            "description": "Total number of cameras detected"
          },
          "streaming": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Streaming",
            "description": "Whether camera is currently streaming"
          },
          "current_format": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CameraFormatDetail"
              },
              {
                "type": "null"
              }
            ],
            "description": "Current streaming format"
          },
          "cameras_found": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/CameraDevice-Output"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cameras Found",
            "description": "Cameras found but not ready"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error",
            "description": "Error message if camera failed to initialize"
          }
        },
        "type": "object",
        "required": [
          "connected",
          "message",
          "ready"
        ],
        "title": "CameraStatusResponse",
        "description": "Response for GET /camera/status endpoint",
        "example": {
          "best_format": {
            "format": "MJPG",
            "fps": 30.0,
            "height": 720,
            "width": 1280
          },
          "bus_info": "usb-xhci-hcd.1-2",
          "connected": true,
          "device_name": "Integrated_Webcam_HD: Integrate",
          "driver_name": "uvcvideo",
          "message": "Camera detected and ready",
          "ready": true,
          "total_cameras": 1,
          "video_devices": [
            "/dev/video0"
          ]
        }
      },
      "CancelCalibrationResponse": {
        "properties": {
          "action": {
            "type": "string",
            "title": "Action"
          },
          "error": {
            "type": "boolean",
            "title": "Error"
          },
          "error_msgs": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Error Msgs",
            "default": []
          },
          "result": {
            "$ref": "#/components/schemas/CalibrationResult"
          }
        },
        "type": "object",
        "required": [
          "action",
          "error",
          "result"
        ],
        "title": "CancelCalibrationResponse"
      },
      "CommandLockoutRequest": {
        "properties": {
          "lockout_enabled": {
            "type": "boolean",
            "title": "Lockout Enabled"
          }
        },
        "type": "object",
        "required": [
          "lockout_enabled"
        ],
        "title": "CommandLockoutRequest",
        "description": "Request to set the command lockout state."
      },
      "CommandLockoutResponse": {
        "properties": {
          "action": {
            "type": "string",
            "title": "Action"
          },
          "error": {
            "type": "boolean",
            "title": "Error"
          },
          "error_msgs": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Error Msgs",
            "default": []
          },
          "result": {
            "$ref": "#/components/schemas/CommandLockoutResult"
          }
        },
        "type": "object",
        "required": [
          "action",
          "error",
          "result"
        ],
        "title": "CommandLockoutResponse"
      },
      "CommandLockoutResult": {
        "properties": {
          "lockout_enabled": {
            "type": "boolean",
            "title": "Lockout Enabled"
          }
        },
        "type": "object",
        "required": [
          "lockout_enabled"
        ],
        "title": "CommandLockoutResult",
        "description": "Result of a command lockout operation."
      },
      "ComponentConfigRequest": {
        "properties": {
          "settings": {
            "type": "object",
            "title": "Settings",
            "description": "Configuration settings for the component"
          }
        },
        "type": "object",
        "required": [
          "settings"
        ],
        "title": "ComponentConfigRequest",
        "description": "Request model for configuring a component"
      },
      "ComponentConfigResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Whether the configuration was successful"
          },
          "component_id": {
            "type": "string",
            "title": "Component Id",
            "description": "The configured component identifier"
          },
          "remaining_components": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Remaining Components",
            "description": "Components still needing configuration"
          }
        },
        "type": "object",
        "required": [
          "success",
          "component_id",
          "remaining_components"
        ],
        "title": "ComponentConfigResponse",
        "description": "Response model for component configuration"
      },
      "ConfiguredComponent": {
        "properties": {
          "component_id": {
            "type": "string",
            "title": "Component Id",
            "description": "Component identifier"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "The component type identifier"
          }
        },
        "type": "object",
        "required": [
          "component_id",
          "type"
        ],
        "title": "ConfiguredComponent",
        "description": "Model for configured component information"
      },
      "DetailedHealthCheckResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "database_connection": {
            "type": "string",
            "title": "Database Connection"
          },
          "database_latency": {
            "type": "number",
            "title": "Database Latency"
          },
          "version": {
            "type": "string",
            "title": "Version"
          },
          "api_version": {
            "type": "string",
            "title": "Api Version"
          },
          "environment": {
            "type": "string",
            "title": "Environment"
          },
          "disk_space": {
            "$ref": "#/components/schemas/DiskSpace"
          }
        },
        "type": "object",
        "required": [
          "status",
          "database_connection",
          "database_latency",
          "version",
          "api_version",
          "environment",
          "disk_space"
        ],
        "title": "DetailedHealthCheckResponse"
      },
      "DiskSpace": {
        "properties": {
          "total_bytes": {
            "type": "integer",
            "title": "Total Bytes"
          },
          "used_bytes": {
            "type": "integer",
            "title": "Used Bytes"
          },
          "free_bytes": {
            "type": "integer",
            "title": "Free Bytes"
          },
          "total_gb": {
            "type": "number",
            "title": "Total Gb"
          },
          "used_gb": {
            "type": "number",
            "title": "Used Gb"
          },
          "free_gb": {
            "type": "number",
            "title": "Free Gb"
          },
          "percent_used": {
            "type": "number",
            "title": "Percent Used"
          }
        },
        "type": "object",
        "required": [
          "total_bytes",
          "used_bytes",
          "free_bytes",
          "total_gb",
          "used_gb",
          "free_gb",
          "percent_used"
        ],
        "title": "DiskSpace"
      },
      "EmergencyStopActivateResponse": {
        "properties": {
          "action": {
            "type": "string",
            "title": "Action"
          },
          "error": {
            "type": "boolean",
            "title": "Error"
          },
          "error_msgs": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Error Msgs",
            "default": []
          },
          "result": {
            "$ref": "#/components/schemas/EmergencyStopResult"
          }
        },
        "type": "object",
        "required": [
          "action",
          "error",
          "result"
        ],
        "title": "EmergencyStopActivateResponse"
      },
      "EmergencyStopDeactivateResponse": {
        "properties": {
          "action": {
            "type": "string",
            "title": "Action"
          },
          "error": {
            "type": "boolean",
            "title": "Error"
          },
          "error_msgs": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Error Msgs",
            "default": []
          },
          "result": {
            "$ref": "#/components/schemas/EmergencyStopResult"
          }
        },
        "type": "object",
        "required": [
          "action",
          "error",
          "result"
        ],
        "title": "EmergencyStopDeactivateResponse"
      },
      "EmergencyStopResult": {
        "properties": {
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          }
        },
        "type": "object",
        "required": [
          "is_active"
        ],
        "title": "EmergencyStopResult"
      },
      "ExitSetupResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Whether exiting setup mode was successful"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Status message"
          }
        },
        "type": "object",
        "required": [
          "success",
          "message"
        ],
        "title": "ExitSetupResponse",
        "description": "Response model for exiting setup mode"
      },
      "FinishCalibrationRequest": {
        "properties": {
          "pulled_cable_length": {
            "type": "number",
            "title": "Pulled Cable Length"
          }
        },
        "type": "object",
        "required": [
          "pulled_cable_length"
        ],
        "title": "FinishCalibrationRequest"
      },
      "FinishCalibrationResponse": {
        "properties": {
          "action": {
            "type": "string",
            "title": "Action"
          },
          "error": {
            "type": "boolean",
            "title": "Error"
          },
          "error_msgs": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Error Msgs",
            "default": []
          },
          "result": {
            "$ref": "#/components/schemas/FinishCalibrationResult"
          }
        },
        "type": "object",
        "required": [
          "action",
          "error",
          "result"
        ],
        "title": "FinishCalibrationResponse"
      },
      "FinishCalibrationResult": {
        "properties": {
          "calibrating": {
            "type": "boolean",
            "title": "Calibrating"
          },
          "new_factor": {
            "type": "number",
            "title": "New Factor"
          }
        },
        "type": "object",
        "required": [
          "calibrating",
          "new_factor"
        ],
        "title": "FinishCalibrationResult"
      },
      "GetCablePositionResponse": {
        "properties": {
          "action": {
            "type": "string",
            "title": "Action"
          },
          "error": {
            "type": "boolean",
            "title": "Error"
          },
          "error_msgs": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Error Msgs",
            "default": []
          },
          "result": {
            "$ref": "#/components/schemas/GetCablePositionResult"
          }
        },
        "type": "object",
        "required": [
          "action",
          "error",
          "result"
        ],
        "title": "GetCablePositionResponse"
      },
      "GetCablePositionResult": {
        "properties": {
          "cable_position": {
            "type": "number",
            "title": "Cable Position",
            "description": "A positive or negative float in units of meters."
          }
        },
        "type": "object",
        "required": [
          "cable_position"
        ],
        "title": "GetCablePositionResult"
      },
      "GoToRequest": {
        "properties": {
          "target_position": {
            "type": "number",
            "title": "Target Position"
          },
          "speed": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 100.0,
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Speed",
            "description": "If not null, will go-to target position at desired speed. If null, will go-to target position at the current speed the reel is set at."
          }
        },
        "type": "object",
        "required": [
          "target_position",
          "speed"
        ],
        "title": "GoToRequest"
      },
      "GoToResponse": {
        "properties": {
          "action": {
            "type": "string",
            "title": "Action"
          },
          "error": {
            "type": "boolean",
            "title": "Error"
          },
          "error_msgs": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Error Msgs",
            "default": []
          },
          "result": {
            "$ref": "#/components/schemas/GoToResult"
          }
        },
        "type": "object",
        "required": [
          "action",
          "error",
          "result"
        ],
        "title": "GoToResponse"
      },
      "GoToResult": {
        "properties": {
          "target_position": {
            "type": "number",
            "title": "Target Position",
            "description": "The target position in meters"
          },
          "current_position": {
            "type": "number",
            "title": "Current Position",
            "description": "The current position in meters"
          },
          "reel_direction": {
            "type": "string",
            "title": "Reel Direction",
            "description": "The direction of reel movement (WIND or UNWIND)"
          }
        },
        "type": "object",
        "required": [
          "target_position",
          "current_position",
          "reel_direction"
        ],
        "title": "GoToResult"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HealthCheckResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "database_connection": {
            "type": "string",
            "title": "Database Connection"
          },
          "version": {
            "type": "string",
            "title": "Version"
          },
          "disk_space": {
            "type": "string",
            "title": "Disk Space"
          }
        },
        "type": "object",
        "required": [
          "status",
          "database_connection",
          "version",
          "disk_space"
        ],
        "title": "HealthCheckResponse"
      },
      "HeartbeatResponse": {
        "properties": {
          "reel_state": {
            "$ref": "#/components/schemas/ReelStateSchema"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          }
        },
        "type": "object",
        "required": [
          "reel_state",
          "timestamp"
        ],
        "title": "HeartbeatResponse"
      },
      "LoopControlMode": {
        "type": "integer",
        "enum": [
          0,
          1
        ],
        "title": "LoopControlMode"
      },
      "MotoronSpeedBoostSettings": {
        "properties": {
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "default": false
          },
          "speed_boost_percentage": {
            "type": "integer",
            "maximum": 200.0,
            "minimum": 50.0,
            "title": "Speed Boost Percentage",
            "description": "The speed boost percentage. 150% means 50% faster",
            "default": 150
          }
        },
        "type": "object",
        "title": "MotoronSpeedBoostSettings"
      },
      "MotoronStateSchema": {
        "properties": {
          "driver_type": {
            "type": "string",
            "enum": [
              "motoron"
            ],
            "const": "motoron",
            "title": "Driver Type",
            "default": "motoron"
          },
          "input_voltage": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Input Voltage",
            "description": "The input voltage for the motor driver in volts."
          },
          "statuses": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MotoronStatusSchema"
              }
            ],
            "description": "Status flags for the Motoron motor driver."
          }
        },
        "type": "object",
        "title": "MotoronStateSchema",
        "description": "Schema for Motoron motor driver state."
      },
      "MotoronStatusSchema": {
        "properties": {
          "reset": {
            "type": "boolean",
            "title": "Reset",
            "description": "Controller was reset.",
            "default": false
          },
          "error_active": {
            "type": "boolean",
            "title": "Error Active",
            "description": "Error is active.",
            "default": false
          },
          "motor_output_enabled": {
            "type": "boolean",
            "title": "Motor Output Enabled",
            "description": "Motor output is enabled.",
            "default": false
          },
          "motor_driving": {
            "type": "boolean",
            "title": "Motor Driving",
            "description": "Motor is currently driving.",
            "default": false
          },
          "no_power": {
            "type": "boolean",
            "title": "No Power",
            "description": "No power to motor driver.",
            "default": false
          },
          "motor_faulting": {
            "type": "boolean",
            "title": "Motor Faulting",
            "description": "Motor fault detected.",
            "default": false
          }
        },
        "type": "object",
        "title": "MotoronStatusSchema",
        "description": "Schema for Motoron-specific status flags."
      },
      "PIDControllerInfoResponse": {
        "properties": {
          "calibrated": {
            "type": "boolean",
            "title": "Calibrated"
          },
          "calibrated_timestamp": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Calibrated Timestamp"
          },
          "calibrating": {
            "type": "boolean",
            "title": "Calibrating"
          }
        },
        "type": "object",
        "required": [
          "calibrated",
          "calibrated_timestamp",
          "calibrating"
        ],
        "title": "PIDControllerInfoResponse"
      },
      "ReelMotorControlRequest": {
        "properties": {
          "speed": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 0.0,
            "title": "Speed",
            "description": "Speed value percentage between 0 and 100 inclusive."
          }
        },
        "type": "object",
        "required": [
          "speed"
        ],
        "title": "ReelMotorControlRequest"
      },
      "ReelMotorControlResponse": {
        "properties": {
          "action": {
            "type": "string",
            "title": "Action"
          },
          "error": {
            "type": "boolean",
            "title": "Error"
          },
          "error_msgs": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Error Msgs",
            "default": []
          },
          "result": {
            "$ref": "#/components/schemas/ReelMotorControlResult"
          }
        },
        "type": "object",
        "required": [
          "action",
          "error",
          "result"
        ],
        "title": "ReelMotorControlResponse"
      },
      "ReelMotorControlResult": {
        "properties": {
          "speed": {
            "type": "integer",
            "title": "Speed"
          }
        },
        "type": "object",
        "required": [
          "speed"
        ],
        "title": "ReelMotorControlResult"
      },
      "ReelMotorJogRequest": {
        "properties": {
          "direction": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "title": "Direction"
          }
        },
        "type": "object",
        "required": [
          "direction"
        ],
        "title": "ReelMotorJogRequest"
      },
      "ReelSettings": {
        "properties": {
          "loop_control_mode": {
            "$ref": "#/components/schemas/LoopControlMode"
          },
          "reel_safeguards_enabled": {
            "type": "boolean",
            "title": "Reel Safeguards Enabled",
            "default": true
          },
          "safeguards": {
            "$ref": "#/components/schemas/SafeguardSettings"
          },
          "max_cable_length_meters": {
            "type": "number",
            "title": "Max Cable Length Meters"
          },
          "zero_point_gutter": {
            "type": "number",
            "title": "Zero Point Gutter"
          },
          "always_enable_remote_control": {
            "type": "boolean",
            "title": "Always Enable Remote Control"
          },
          "active_position_hold_enabled": {
            "type": "boolean",
            "title": "Active Position Hold Enabled"
          },
          "motoron_speed_boost": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/MotoronSpeedBoostSettings"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "loop_control_mode",
          "max_cable_length_meters",
          "zero_point_gutter",
          "always_enable_remote_control",
          "active_position_hold_enabled",
          "motoron_speed_boost"
        ],
        "title": "ReelSettings"
      },
      "ReelSettingsResponse": {
        "properties": {
          "action": {
            "type": "string",
            "title": "Action"
          },
          "error": {
            "type": "boolean",
            "title": "Error"
          },
          "error_msgs": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Error Msgs",
            "default": []
          },
          "result": {
            "$ref": "#/components/schemas/ReelSettingsResult"
          }
        },
        "type": "object",
        "required": [
          "action",
          "error",
          "result"
        ],
        "title": "ReelSettingsResponse"
      },
      "ReelSettingsResult": {
        "properties": {
          "settings": {
            "$ref": "#/components/schemas/ReelSettings"
          }
        },
        "type": "object",
        "required": [
          "settings"
        ],
        "title": "ReelSettingsResult"
      },
      "ReelStateSchema": {
        "properties": {
          "loop_control_mode": {
            "type": "integer",
            "title": "Loop Control Mode"
          },
          "cable_position": {
            "type": "number",
            "title": "Cable Position",
            "description": "The current position of the cable, in meters."
          },
          "cable_speed_mps": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cable Speed Mps",
            "description": "The current speed of the cable movement in meters per second. Only available when encoder is installed."
          },
          "reel_direction": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "title": "Reel Direction"
          },
          "speed_percentage": {
            "type": "integer",
            "title": "Speed Percentage"
          },
          "reel_safeguards_enabled": {
            "type": "boolean",
            "title": "Reel Safeguards Enabled"
          },
          "is_remote_active": {
            "type": "boolean",
            "title": "Is Remote Active"
          },
          "reed_switch_closed": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reed Switch Closed"
          },
          "is_encoder_disconnected": {
            "type": "boolean",
            "title": "Is Encoder Disconnected"
          },
          "is_cable_counter_calibrating": {
            "type": "boolean",
            "title": "Is Cable Counter Calibrating"
          },
          "motor_driver_unresponsive": {
            "type": "boolean",
            "title": "Motor Driver Unresponsive"
          },
          "motor_driver_error": {
            "type": "boolean",
            "title": "Motor Driver Error"
          },
          "motor_driver_error_msgs": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Motor Driver Error Msgs"
          },
          "motor_encoder_position": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Motor Encoder Position"
          },
          "is_jogging": {
            "type": "boolean",
            "title": "Is Jogging"
          },
          "is_maintaining_position": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Maintaining Position",
            "description": "If the active braking setting is enabled and the required hardware installed, this field will be not null. If the field is true, then it means active braking has detected that a force acting on the motor and is currently correcting it."
          },
          "estop_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Estop Active"
          },
          "command_lockout_enabled": {
            "type": "boolean",
            "title": "Command Lockout Enabled",
            "description": "If true, then the reel will not accept any movement commands. Active hold position will still work."
          },
          "safeguard_violations": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SafeguardViolationsSchema"
              }
            ],
            "description": "Status of active safeguard violations. Fields will be None when the corresponding safeguard is disabled."
          },
          "motor_driver": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RoboclawStateSchema"
              },
              {
                "$ref": "#/components/schemas/MotoronStateSchema"
              }
            ],
            "title": "Motor Driver",
            "description": "The current state of the motor driver. Contains detailed status information specific to the driver type."
          }
        },
        "type": "object",
        "required": [
          "loop_control_mode",
          "cable_position",
          "reel_direction",
          "speed_percentage",
          "reel_safeguards_enabled",
          "is_remote_active",
          "is_encoder_disconnected",
          "is_cable_counter_calibrating",
          "motor_driver_unresponsive",
          "motor_driver_error",
          "motor_driver_error_msgs",
          "is_jogging",
          "command_lockout_enabled"
        ],
        "title": "ReelStateSchema"
      },
      "ResolutionDetail": {
        "properties": {
          "width": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Width",
            "description": "Frame width in pixels"
          },
          "height": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Height",
            "description": "Frame height in pixels"
          },
          "framerates": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Framerates",
            "description": "Supported framerates for this resolution"
          }
        },
        "type": "object",
        "required": [
          "width",
          "height",
          "framerates"
        ],
        "title": "ResolutionDetail",
        "description": "Resolution with supported framerates",
        "example": {
          "framerates": [
            15.0,
            30.0
          ],
          "height": 720,
          "width": 1280
        }
      },
      "RoboclawStateSchema": {
        "properties": {
          "driver_type": {
            "type": "string",
            "enum": [
              "roboclaw"
            ],
            "const": "roboclaw",
            "title": "Driver Type",
            "default": "roboclaw"
          },
          "input_voltage": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Input Voltage",
            "description": "The input voltage for the motor driver in volts."
          },
          "firmware_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Firmware Version",
            "description": "Roboclaw firmware version."
          },
          "statuses": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RoboclawStatusSchema"
              }
            ],
            "description": "Status flags for the Roboclaw motor driver."
          },
          "active_errors": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Active Errors",
            "description": "List of active error messages from the Roboclaw."
          }
        },
        "type": "object",
        "title": "RoboclawStateSchema",
        "description": "Schema for Roboclaw motor driver state."
      },
      "RoboclawStatusSchema": {
        "properties": {
          "estop_active": {
            "type": "boolean",
            "title": "Estop Active",
            "description": "Emergency stop is active.",
            "default": false
          },
          "temp_error": {
            "type": "boolean",
            "title": "Temp Error",
            "description": "Temperature error detected.",
            "default": false
          },
          "main_voltage_high": {
            "type": "boolean",
            "title": "Main Voltage High",
            "description": "Main voltage is too high.",
            "default": false
          },
          "logic_voltage_high": {
            "type": "boolean",
            "title": "Logic Voltage High",
            "description": "Logic voltage is too high.",
            "default": false
          },
          "logic_voltage_low": {
            "type": "boolean",
            "title": "Logic Voltage Low",
            "description": "Logic voltage is too low.",
            "default": false
          },
          "m1_driver_fault": {
            "type": "boolean",
            "title": "M1 Driver Fault",
            "description": "Motor 1 driver fault detected.",
            "default": false
          },
          "m1_speed_error": {
            "type": "boolean",
            "title": "M1 Speed Error",
            "description": "Motor 1 speed error detected.",
            "default": false
          },
          "m1_position_error": {
            "type": "boolean",
            "title": "M1 Position Error",
            "description": "Motor 1 position error detected.",
            "default": false
          },
          "m1_current_error": {
            "type": "boolean",
            "title": "M1 Current Error",
            "description": "Motor 1 current error detected.",
            "default": false
          },
          "m1_over_current": {
            "type": "boolean",
            "title": "M1 Over Current",
            "description": "Motor 1 over current detected.",
            "default": false
          },
          "main_voltage_low": {
            "type": "boolean",
            "title": "Main Voltage Low",
            "description": "Main voltage is too low.",
            "default": false
          },
          "temp_warning": {
            "type": "boolean",
            "title": "Temp Warning",
            "description": "Temperature warning detected.",
            "default": false
          },
          "s4_signal_triggered": {
            "type": "boolean",
            "title": "S4 Signal Triggered",
            "description": "S4 signal has been triggered.",
            "default": false
          },
          "s5_signal_triggered": {
            "type": "boolean",
            "title": "S5 Signal Triggered",
            "description": "S5 signal has been triggered.",
            "default": false
          },
          "speed_error_limit_warning": {
            "type": "boolean",
            "title": "Speed Error Limit Warning",
            "description": "Speed error limit warning.",
            "default": false
          },
          "position_error_limit_warning": {
            "type": "boolean",
            "title": "Position Error Limit Warning",
            "description": "Position error limit warning.",
            "default": false
          }
        },
        "type": "object",
        "title": "RoboclawStatusSchema",
        "description": "Schema for Roboclaw-specific status flags."
      },
      "SafeguardSettings": {
        "properties": {
          "no_cable_movement_enabled": {
            "type": "boolean",
            "title": "No Cable Movement Enabled",
            "description": "When enabled, detects and alerts when cable should be moving but isn't",
            "default": true
          },
          "zero_point_enabled": {
            "type": "boolean",
            "title": "Zero Point Enabled",
            "description": "When enabled, prevents the cable from rewinding past the zero_point_gutter",
            "default": true
          },
          "max_tether_length_enabled": {
            "type": "boolean",
            "title": "Max Tether Length Enabled",
            "description": "When enabled, prevents the cable from unwinding beyond the max_cable_length_meters",
            "default": true
          }
        },
        "type": "object",
        "title": "SafeguardSettings",
        "description": "Specific safeguard settings that can be individually enabled/disabled."
      },
      "SafeguardViolationsSchema": {
        "properties": {
          "cable_position_below_zero_point": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cable Position Below Zero Point",
            "description": "When True, indicates the cable position has gone below the zero point gutter. None means this safeguard is not active."
          },
          "cable_position_exceeds_max_length": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cable Position Exceeds Max Length",
            "description": "When True, indicates the cable position has exceeded the maximum allowed length. None means this safeguard is not active."
          },
          "no_cable_movement_detected": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "No Cable Movement Detected",
            "description": "When True, indicates the system expected cable movement but none was detected. None means this safeguard is not active."
          }
        },
        "type": "object",
        "title": "SafeguardViolationsSchema"
      },
      "SetEncoderCountRequest": {
        "properties": {
          "cable_position": {
            "type": "number",
            "title": "Cable Position",
            "description": "A positive or negative float in units of meters."
          }
        },
        "type": "object",
        "required": [
          "cable_position"
        ],
        "title": "SetEncoderCountRequest"
      },
      "SetEncoderCountResponse": {
        "properties": {
          "action": {
            "type": "string",
            "title": "Action"
          },
          "error": {
            "type": "boolean",
            "title": "Error"
          },
          "error_msgs": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Error Msgs",
            "default": []
          },
          "result": {
            "$ref": "#/components/schemas/CablePositionOperationResult"
          }
        },
        "type": "object",
        "required": [
          "action",
          "error",
          "result"
        ],
        "title": "SetEncoderCountResponse"
      },
      "SetupStatus": {
        "properties": {
          "setup_mode_active": {
            "type": "boolean",
            "title": "Setup Mode Active",
            "description": "Whether setup mode is currently active"
          },
          "unconfigured_components": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Unconfigured Components",
            "description": "List of components needing configuration"
          },
          "configured_components": {
            "items": {
              "$ref": "#/components/schemas/ConfiguredComponent"
            },
            "type": "array",
            "title": "Configured Components",
            "description": "List of configured components with their types"
          },
          "can_exit_setup": {
            "type": "boolean",
            "title": "Can Exit Setup",
            "description": "Whether all required configuration is complete"
          }
        },
        "type": "object",
        "required": [
          "setup_mode_active",
          "unconfigured_components",
          "can_exit_setup"
        ],
        "title": "SetupStatus",
        "description": "Response model for setup status endpoint"
      },
      "StartCalibrationResponse": {
        "properties": {
          "action": {
            "type": "string",
            "title": "Action"
          },
          "error": {
            "type": "boolean",
            "title": "Error"
          },
          "error_msgs": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Error Msgs",
            "default": []
          },
          "result": {
            "$ref": "#/components/schemas/CalibrationResult"
          }
        },
        "type": "object",
        "required": [
          "action",
          "error",
          "result"
        ],
        "title": "StartCalibrationResponse"
      },
      "StopCameraResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Whether the stop operation was successful"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Result message"
          }
        },
        "type": "object",
        "required": [
          "success",
          "message"
        ],
        "title": "StopCameraResponse",
        "description": "Response for POST /camera/stop endpoint",
        "example": {
          "message": "Camera stopped",
          "success": true
        }
      },
      "SupportedFormat": {
        "properties": {
          "format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VideoFormat"
              }
            ],
            "description": "Video format identifier"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Human-readable format description"
          },
          "resolutions": {
            "items": {
              "$ref": "#/components/schemas/ResolutionDetail"
            },
            "type": "array",
            "title": "Resolutions",
            "description": "Supported resolutions for this format"
          }
        },
        "type": "object",
        "required": [
          "format",
          "description",
          "resolutions"
        ],
        "title": "SupportedFormat",
        "description": "Supported camera format with resolutions",
        "example": {
          "description": "Motion-JPEG, compressed",
          "format": "MJPG",
          "resolutions": [
            {
              "framerates": [
                30.0
              ],
              "height": 720,
              "width": 1280
            }
          ]
        }
      },
      "SupportedResolutionsResponse-Input": {
        "properties": {
          "device": {
            "type": "string",
            "title": "Device",
            "description": "Camera device path"
          },
          "supported_resolutions": {
            "items": {
              "$ref": "#/components/schemas/ResolutionDetail"
            },
            "type": "array",
            "title": "Supported Resolutions",
            "description": "List of supported resolutions"
          },
          "source": {
            "type": "string",
            "title": "Source",
            "description": "Source of resolution data (active_camera or v4l2_detection)"
          },
          "current_format": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CameraFormatDetail"
              },
              {
                "type": "null"
              }
            ],
            "description": "Current streaming format"
          },
          "device_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Device Name",
            "description": "Camera device name"
          },
          "supported_formats": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/SupportedFormat"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Supported Formats",
            "description": "All supported formats"
          },
          "best_format": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CameraFormatDetail"
              },
              {
                "type": "null"
              }
            ],
            "description": "Recommended format"
          }
        },
        "type": "object",
        "required": [
          "device",
          "supported_resolutions",
          "source"
        ],
        "title": "SupportedResolutionsResponse",
        "description": "Response for GET /camera/supported-resolutions endpoint",
        "example": {
          "best_format": {
            "format": "MJPG",
            "fps": 30.0,
            "height": 720,
            "width": 1280
          },
          "device": "/dev/video0",
          "device_name": "USB Camera",
          "source": "v4l2_detection",
          "supported_formats": [],
          "supported_resolutions": [
            {
              "framerates": [
                30.0
              ],
              "height": 720,
              "width": 1280
            }
          ]
        }
      },
      "SupportedResolutionsResponse-Output": {
        "properties": {
          "device": {
            "type": "string",
            "title": "Device",
            "description": "Camera device path"
          },
          "supported_resolutions": {
            "items": {
              "$ref": "#/components/schemas/ResolutionDetail"
            },
            "type": "array",
            "title": "Supported Resolutions",
            "description": "List of supported resolutions"
          },
          "source": {
            "type": "string",
            "title": "Source",
            "description": "Source of resolution data (active_camera or v4l2_detection)"
          },
          "current_format": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CameraFormatDetail"
              },
              {
                "type": "null"
              }
            ],
            "description": "Current streaming format"
          },
          "device_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Device Name",
            "description": "Camera device name"
          },
          "supported_formats": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/SupportedFormat"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Supported Formats",
            "description": "All supported formats"
          },
          "best_format": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CameraFormatDetail"
              },
              {
                "type": "null"
              }
            ],
            "description": "Recommended format"
          }
        },
        "type": "object",
        "required": [
          "device",
          "supported_resolutions",
          "source"
        ],
        "title": "SupportedResolutionsResponse",
        "description": "Response for GET /camera/supported-resolutions endpoint",
        "example": {
          "best_format": {
            "format": "MJPG",
            "fps": 30.0,
            "height": 720,
            "width": 1280
          },
          "device": "/dev/video0",
          "device_name": "USB Camera",
          "source": "v4l2_detection",
          "supported_formats": [],
          "supported_resolutions": [
            {
              "framerates": [
                30.0
              ],
              "height": 720,
              "width": 1280
            }
          ]
        }
      },
      "UpdateReelSettingsRequest": {
        "properties": {
          "reel_safeguards_enabled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reel Safeguards Enabled"
          },
          "safeguards": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SafeguardSettings"
              },
              {
                "type": "null"
              }
            ]
          },
          "max_cable_length_meters": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Cable Length Meters",
            "description": "The max cable length. When reel safeguards are enabled, the reel will stop when this position is exceeded while unwinding."
          },
          "zero_point_gutter": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Zero Point Gutter",
            "description": "When reel safeguards are enabled, this offset from 0 is the position the reel will stop when winding in."
          },
          "always_enable_remote_control": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Always Enable Remote Control",
            "description": "When true, physical controls will not disable remote control."
          },
          "active_position_hold_enabled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Active Position Hold Enabled",
            "description": "When true the able reel will actively maintain the last position stopped at by driving the reel motor."
          },
          "motoron_speed_boost": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/MotoronSpeedBoostSettings"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "max_cable_length_meters",
          "zero_point_gutter",
          "always_enable_remote_control",
          "active_position_hold_enabled"
        ],
        "title": "UpdateReelSettingsRequest"
      },
      "UpdateReelSettingsResponse": {
        "properties": {
          "action": {
            "type": "string",
            "title": "Action"
          },
          "error": {
            "type": "boolean",
            "title": "Error"
          },
          "error_msgs": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Error Msgs",
            "default": []
          },
          "result": {
            "$ref": "#/components/schemas/UpdateReelSettingsResult"
          }
        },
        "type": "object",
        "required": [
          "action",
          "error",
          "result"
        ],
        "title": "UpdateReelSettingsResponse"
      },
      "UpdateReelSettingsResult": {
        "properties": {
          "settings": {
            "$ref": "#/components/schemas/ReelSettings"
          }
        },
        "type": "object",
        "required": [
          "settings"
        ],
        "title": "UpdateReelSettingsResult"
      },
      "UserLoginResponse": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type"
          }
        },
        "type": "object",
        "required": [
          "access_token",
          "token_type"
        ],
        "title": "UserLoginResponse",
        "description": "Pydantic model for the response returned after a user successfully logs in.\n\nAttributes:\n    access_token (str): The JWT access token issued to the user.\n    token_type (str): The type of the token, typically \"bearer\"."
      },
      "UserRegister": {
        "properties": {
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "title": "Password"
          },
          "user_role": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Role",
            "default": "operator"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "UserRegister",
        "description": "Schema for user registration.\n\nAttributes:\n    username (str): The username for the new user.\n    password (str): The password for the new user."
      },
      "UserRegisterResponse": {
        "properties": {
          "username": {
            "type": "string",
            "title": "Username"
          }
        },
        "type": "object",
        "required": [
          "username"
        ],
        "title": "UserRegisterResponse",
        "description": "Pydantic model for the response returned after a user successfully registers.\n\nAttributes:\n    username (str): The username of the newly registered user."
      },
      "UserRegistrationOpen": {
        "properties": {
          "registration_open": {
            "type": "boolean",
            "title": "Registration Open",
            "description": "True if registration is open; otherwise, false hwen registration is closed."
          }
        },
        "type": "object",
        "required": [
          "registration_open"
        ],
        "title": "UserRegistrationOpen"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "VideoFormat": {
        "type": "string",
        "enum": [
          "MJPG",
          "YUYV",
          "H264",
          "UYVY"
        ],
        "title": "VideoFormat",
        "description": "Supported video formats"
      },
      "ZeroCablePositionResponse": {
        "properties": {
          "action": {
            "type": "string",
            "title": "Action"
          },
          "error": {
            "type": "boolean",
            "title": "Error"
          },
          "error_msgs": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Error Msgs",
            "default": []
          },
          "result": {
            "$ref": "#/components/schemas/CablePositionOperationResult"
          }
        },
        "type": "object",
        "required": [
          "action",
          "error",
          "result"
        ],
        "title": "ZeroCablePositionResponse"
      }
    },
    "securitySchemes": {
      "OAuth2PasswordBearer": {
        "type": "oauth2",
        "flows": {
          "password": {
            "scopes": {},
            "tokenUrl": "v1/login"
          }
        }
      }
    }
  }
}